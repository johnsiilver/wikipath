// Code generated by protoc-gen-go.
// source: wikipath.proto
// DO NOT EDIT!

/*
Package wikipath is a generated protocol buffer package.

It is generated from these files:
	wikipath.proto

It has these top-level messages:
	SPFRequest
	SPFResponse
*/
package wikipath

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SPFRequest struct {
	From string `protobuf:"bytes,1,opt,name=from" json:"from,omitempty"`
	To   string `protobuf:"bytes,2,opt,name=to" json:"to,omitempty"`
}

func (m *SPFRequest) Reset()                    { *m = SPFRequest{} }
func (m *SPFRequest) String() string            { return proto.CompactTextString(m) }
func (*SPFRequest) ProtoMessage()               {}
func (*SPFRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type SPFResponse struct {
	Path []string `protobuf:"bytes,1,rep,name=path" json:"path,omitempty"`
}

func (m *SPFResponse) Reset()                    { *m = SPFResponse{} }
func (m *SPFResponse) String() string            { return proto.CompactTextString(m) }
func (*SPFResponse) ProtoMessage()               {}
func (*SPFResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func init() {
	proto.RegisterType((*SPFRequest)(nil), "SPFRequest")
	proto.RegisterType((*SPFResponse)(nil), "SPFResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for SPFService service

type SPFServiceClient interface {
	Search(ctx context.Context, in *SPFRequest, opts ...grpc.CallOption) (*SPFResponse, error)
}

type sPFServiceClient struct {
	cc *grpc.ClientConn
}

func NewSPFServiceClient(cc *grpc.ClientConn) SPFServiceClient {
	return &sPFServiceClient{cc}
}

func (c *sPFServiceClient) Search(ctx context.Context, in *SPFRequest, opts ...grpc.CallOption) (*SPFResponse, error) {
	out := new(SPFResponse)
	err := grpc.Invoke(ctx, "/SPFService/Search", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SPFService service

type SPFServiceServer interface {
	Search(context.Context, *SPFRequest) (*SPFResponse, error)
}

func RegisterSPFServiceServer(s *grpc.Server, srv SPFServiceServer) {
	s.RegisterService(&_SPFService_serviceDesc, srv)
}

func _SPFService_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SPFRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SPFServiceServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SPFService/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SPFServiceServer).Search(ctx, req.(*SPFRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SPFService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "SPFService",
	HandlerType: (*SPFServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Search",
			Handler:    _SPFService_Search_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("wikipath.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 144 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x2b, 0xcf, 0xcc, 0xce,
	0x2c, 0x48, 0x2c, 0xc9, 0xd0, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x57, 0x32, 0xe0, 0xe2, 0x0a, 0x0e,
	0x70, 0x0b, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x11, 0x12, 0xe2, 0x62, 0x49, 0x2b, 0xca, 0xcf,
	0x95, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x02, 0xb3, 0x85, 0xf8, 0xb8, 0x98, 0x4a, 0xf2, 0x25,
	0x98, 0xc0, 0x22, 0x4c, 0x25, 0xf9, 0x4a, 0x8a, 0x5c, 0xdc, 0x60, 0x1d, 0xc5, 0x05, 0xf9, 0x79,
	0xc5, 0xa9, 0x20, 0x2d, 0x20, 0xe3, 0x24, 0x18, 0x15, 0x98, 0x41, 0x5a, 0x40, 0x6c, 0x23, 0x43,
	0xb0, 0xa1, 0xc1, 0xa9, 0x45, 0x65, 0x99, 0xc9, 0xa9, 0x42, 0xca, 0x5c, 0x6c, 0xc1, 0xa9, 0x89,
	0x45, 0xc9, 0x19, 0x42, 0xdc, 0x7a, 0x08, 0xbb, 0xa4, 0x78, 0xf4, 0x90, 0x8c, 0x49, 0x62, 0x03,
	0x3b, 0xc7, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x7f, 0x8d, 0xce, 0x1d, 0xa0, 0x00, 0x00, 0x00,
}
